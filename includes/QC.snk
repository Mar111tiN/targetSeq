rule fastqc:
    input: 
        "fastq/{sample}_{read}.fastq.gz"
    output:
        "fastqc/{sample}_{read}_fastqc.zip"
    threads: 4
    log:
        "logs/fastqc/{sample}_{read}.log"
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    script:
        "../scripts/fastQC.py"


rule fast_multiQC:
    input:
        get_fastqc_list
    output:
        "QC/fastQC.html"
    threads: 2
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    shell:
        "multiqc -f -o QC/ -n fastQC --interactive fastQC/"  # interactive for big number of files

#########################################################################
# ####################### BAM QC ########################################

rule cover_BED:
    input:
        sample = "recalib/{sample}.bam",
        ref_gen = os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "coverBED/{sample}.txt"
    log:
        "logs/coverBED/{sample}.log"
    threads: 2
    params:
        exon_cover = get_bed_file('Covered'),
        prettifyBed = get_script('prettifyBED'),
        refgen = full_path('genome')
    conda:
        f"../{config['envs']}/bedcover-env.yml"
    script:
        "../scripts/bedcover.py"

rule bam_metrix:
    input:
        bam = "recalib/{sample}.bam",
        bai = "recalib/{sample}.bai"
    output:
        "bam_metrics/{sample}.metrics"
    conda:
        f"../{config['envs']}/align-env.yml"
    log:
        "logs/bam_metrix/{sample}.log"
    threads: config['bam_metrix']['threads']
    params:
        refgen = full_path('genome'),
        bait = os.path.join(config['paths']['mystatic'], config['bam_metrix']['bait']),
        target = os.path.join(config['paths']['mystatic'], config['bam_metrix']['target'])
    shell:
        "picard CollectHsMetrics I={input.bam} O={output} R={params.refgen} "
        "BAIT_INTERVALS={params.bait} "
        "TARGET_INTERVALS={params.target} "
        "COVERAGE_CAP=10000"

rule bam_QC:
    input:
        expand("bam_metrics/{sample}.metrics", sample=samples)
    output:
        "QC/libraryQC.html"
    conda:
        "../env/fastQC-env.yml"
    threads: 2
    shell:
        "multiqc -f -o QC/ -n libraryQC --interactive bam_metrics/; "


# ##################### insert size QC ##############################################
rule insert_metrix:
    input:
        bam = "recalib/{sample}.bam",
        bai = "recalib/{sample}.bai"
    output:
        metric = "insert_metrics/{sample}.metrics",
        pdf = "insert_metrics/{sample}.metrics.pdf"
    conda:
        f"../{config['envs']}/picard-env.yml"
    log:
        "logs/bam_metrix/{sample}.log"
    threads: config['bam_metrix']['threads']
    shell:
        "picard CollectInsertSizeMetrics I={input.bam} O={output.metric} H={output.pdf} M=0.5"


rule insert_QC:
    input:
        expand("insert_metrics/{sample}.metrics", sample=samples)
    output:
        "QC/insertQC.html"
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    threads: 2
    shell:
        "multiqc -f -o QC/ -n insertQC --interactive insert_metrics/; "