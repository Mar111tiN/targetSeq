rule annovar:
    input:
        "table/{sample}.csv"
    output:
        "table/{sample}.anno.csv"
    log:
        "logs/annovar/{sample}.log"
    threads:
        config["annovar"]["threads"]
    conda:
        "../env/anno-env.yml"
    params:
        anno = get_anno_params,
        anno_info = get_script('anno_info')
    script:
        "../scripts/anno.py"


rule edit_mutation_list:
    input:
        "table/{sample}.anno.csv"
    output:
        "table/{sample}.edit.csv"
    threads:
        2
    params:
        extended_output = config['filter']['edit']['extended_output'],
        candidate_list = config['filter']['edit']['candidate_list'],
        driver_list = config['filter']['edit']['driver_list'],
        hotspot_list = config['filter']['edit']['hotspot_list']
    script:
        "../scripts/edit_table.py"


rule primer3:
    input: "table/{sample}.filter1.csv"
    output: "table/{sample}.filter1.primer.csv"
    conda:
        "../env/primer3-env.yml"
    threads:
        config['primer3']['threads']
    params:
        genome_split = full_path('genome_split')
    script:
        "../scripts/primer3.py"


rule fisher_strand:
    input:
        "table/{sample}.filter1.csv"
    output:
        "table/{sample}.filter1.fisher.csv"
    log:
        "logs/fisher/{sample}.log"
    threads:
        config["Fisher_strand"]["threads"]
    conda:
        f"../env/fisher-env.yml"
    script:
        "../scripts/fisher_strand.py"


rule filter_pileup:
    input:
        bam = "recalib/{sample}.bam"
    output:
        pileup = "pileup/{sample}.pileup"
    threads:
        2
    conda:
        f"../env/align-env.yml"
    params:
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}",
        cleanpileup = get_script('cleanpileup')
    shell:
        "samtools mpileup -f {params.refgen} {params.qual} {input.bam} | {params.cleanpileup} > {output.pileup}"


rule detect_HDR:
    input:
        filter_file = "table/{sample}.filter1.csv",
        bam = "recalib/{sample}.bam",
        pileup = "pileup/{sample}.pileup"
    output:
        HDR = "table/{sample}.filter1.HDR.csv"
    conda:
        f"../env/HDR-env.yml"
    threads:
        2
    params:
        min_sim = config['HDR']['min_similarity'],
        min_q = config['HDR']['min_q'],
        min_HDR_count = config['HDR']['min_HDR_count']
    script:
        "../scripts/HDR.py"


rule combine_filter1:
    input:
        anno_edit = "table/{sample}.filter1.csv",
        primer = "table/{sample}.filter1.primer.csv",
        fisher = "table/{sample}.filter1.fisher.csv",
        HDR = "table/{sample}.filter1.HDR.csv"
    output: "filter/{sample}.filter1.csv"
    threads: 2
    script:
        "../scripts/format_table.py"

