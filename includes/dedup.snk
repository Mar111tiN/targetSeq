rule dedup:
    input:
        "mapped/{sample}.bam"
    output:
        "deduped/{sample}.bam"
    log:
        "logs/dedup/{sample}.log"
    params:
        metric = lambda w: f"deduped/{w.sample}.metric.txt"
    threads:
        config['dedup']['threads']
    conda:
        "../env/align-env.yml"
    shell:
        "picard MarkDuplicates I={input} O={output} M={params.metric} REMOVE_DUPLICATES=true &>{log}"


rule dedup_umi:
    input:
        "bam_merge/{sample}.bam"
    output:
        "umi_deduped/{sample}.bam"
    threads:
        int(config['dedup_umi']['max_mem'].strip('g'))
    log:
        "logs/dedup/{sample}.log"
    conda:
        "../env/align-env.yml"
    params:
        metric = lambda w: f"umi_deduped/{w.sample}.metric.txt",
        umi_metrics = lambda w: f"umi_deduped/{w.sample}.umi_metric.txt",
        max_mem = config['dedup_umi']['max_mem'],
        remove_dups = "false" if config['dedup_umi']['keep_dups'] else "true"
    shell:
        "picard UmiAwareMarkDuplicatesWithMateCigar -Xms500m -Xmx{params.max_mem} UMI_METRICS={params.umi_metrics} I={input} O={output[0]} M={params.metric} ASSUME_SORTED=true REMOVE_DUPLICATES={params.remove_dups}; " # &>{log}
