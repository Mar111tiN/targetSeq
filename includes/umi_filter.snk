
rule umi_group:
    input:
        "recalib/{sample}.bam"
    output:
        "umi/{sample}.UG.bam"  # UG --> Umi-grouped
    threads:
        config['UMI_filter']['group']['threads']
    conda:
        "../env/ubam-env.yml"
    log:
        "logs/umi/{sample}.UG.log"
    params:
        mem = f"-Xmx{config['UMI_filter']['group']['mem']}",
        strategy = config['UMI_filter']['group']['group_strategy'],
        min_map_q = config['UMI_filter']['group']['min_map_q'],
        edits = config['UMI_filter']['group']['edits']
    shell:
        "fgbio GroupReadsByUmi {params.mem} "
        "-i {input} -o {output} "
        "-s {params.strategy} "   # adjacency is the recommended method of grouping
        "-m {params.min_map_q} "
        "-e {params.edits} "  # for WES-data, 1 is good; for targeted >3


rule call_consensus:
    input:
        "umi/{sample}.UG.bam"
    output:
        "umi/{sample}.CR.bam"
    threads:
        config['UMI_filter']['call']['threads']
    conda:
        "../env/ubam-env.yml"
    params:
        mem = f"-Xmx{config['UMI_filter']['call']['mem']}",
        min_reads = config['UMI_filter']['min_reads'],
        error_pre = config['UMI_filter']['call']['error_rate_pre_umi'],
        error_post = config['UMI_filter']['call']['error_rate_post_umi'],
        min_input_Q = config['UMI_filter']['call']['min_input_Q'],
        read_group = lambda w: f"{w.sample}"
    shell:
        "fgbio CallMolecularConsensusReads  {params.mem} "
        "-i {input} -o {output} "
        "--read-group-id={params.read_group} "  # output-per-base-tags
        "-M {params.min_reads} "
        "-1 {params.error_pre} "
        "-2 {params.error_post} "
        "-m {params.min_input_Q} "
        "-B true "


rule mark_CR:
    input:
        "umi/{sample}.CR.bam"
    output:
        bam = "umi/{sample}.CR_XT.bam",
        metrix = "umi/{sample}.CR_XT.metrix"
    threads:
        config['map_ubam']['threads']
    conda:
        "../env/align-env.yml"
    params:
        deflater = "use_jdk_deflater=true use_jdk_inflater=true" if config['map_ubam']['use_jdk'] else ""
    shell:
        "picard MarkIlluminaAdapters {params.deflater} I={input} O={output.bam} M={output.metrix} TMP_DIR=$TMPDIR; "


rule remap_CR:
    input:
        bam = "umi/{sample}.CR_XT.bam",
        genome = os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        bam = "umi/{sample}.CRmapped.bam"
    log:
        "logs/Umapped/{sample}.log"
    threads:
        config['UMI_filter']['remap']['threads']
    conda:
        "../env/align-env.yml"
    params:
        mem = f"-Xmx{config['UMI_filter']['remap']['mem']}",
        bwa_threads = config['map_ubam']['threads'],
        refgen = full_path('genome'),
        clip_overlap = "TRUE" if config['UMI_filter']['remap']['clip_overlap'] else "FALSE",
        clip_adapters = "TRUE" if config['UMI_filter']['remap']['clip_adapters'] else "FALSE",
        alignment_strategy = config['map_ubam']['strategy'],
        deflater = "use_jdk_deflater=true use_jdk_inflater=true" if config['map_ubam']['use_jdk'] else ""
    shell:
        # convert bam to fastq
        "picard SamToFastq {params.deflater} "
        "I={input.bam} FASTQ=/dev/stdout "
        "ClIPPING_ATTRIBUTE=XT "        # use XT tag for clipping
        "CLIPPING_ACTION=2 "             # base-quality of clipped bases is set to 2
        "INTERLEAVE=TRUE "
        "NON_PF=TRUE "
        "TMP_DIR=$TMPDIR | "

        # pipe interleaved fastq to bwa for mapping
        "bwa mem -M -t {params.bwa_threads} -p {params.refgen} /dev/stdin | "

        # pipe mapped bam to MergeBamAlignment for merging with unaligned bam containing the XS and XR tags
        "picard MergeBamAlignment {params.mem} "
        "R={params.refgen} "
        "UNMAPPED_BAM={input.bam} "
        "ALIGNED_BAM=/dev/stdin "
        "O={output.bam} "
        "CREATE_INDEX=TRUE "
        "SORT_ORDER=coordinate "
        "ADD_MATE_CIGAR=TRUE "
        "ORIENTATIONS=FR "
        "CLIP_ADAPTERS={params.clip_adapters} "
        "CLIP_OVERLAPPING_READS={params.clip_overlap} "
        "INCLUDE_SECONDARY_ALIGNMENTS=true "
        "MAX_GAPS=-1 "
        "PRIMARY_ALIGNMENT_STRATEGY={params.alignment_strategy} "
        "VALIDATION_STRINGENCY=SILENT "
        "ALIGNER_PROPER_PAIR_FLAGS=true "
        "ATTRIBUTES_TO_RETAIN=XS "  # secondary alignment scores
        "ATTRIBUTES_TO_RETAIN=RX "  # umi tag
        "TMP_DIR=$TMPDIR "


rule filter_consensus:
    input:
        "umi/{sample}.CRmapped.bam"
    output:
        "umi/{sample}.UF.bam"
    threads:
        config['UMI_filter']['filter']['threads']
    conda:
        "../env/ubam-env.yml"
    params:
        mem = f"-Xmx{config['UMI_filter']['filter']['mem']}",
        min_reads = config['UMI_filter']['min_reads'],
        max_read_error = config['UMI_filter']['filter']['max_error_rate_per_read'],
        max_base_error = config['UMI_filter']['filter']['max_error_rate_per_base'],
        min_Q = config['UMI_filter']['filter']['min_Q'],
        max_no_call = config['UMI_filter']['filter']['max_no_call'],
        ref = full_path('genome')
    shell:
        "fgbio FilterConsensusReads {params.mem} "
        "-i {input} -o {output} "
        "-r {params.ref} "
        "-M {params.min_reads} "
        "-N {params.min_Q} "
        "-E {params.max_read_error} "
        "-e {params.max_base_error} "
