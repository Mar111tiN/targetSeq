from subprocess import Popen, PIPE, DEVNULL
from io import StringIO
import pandas as pd
import os


ansii_colors = {
          'magenta': '[1;35;2m',
          'green': '[1;9;2m',
          'red': '[1;31;1m',
          'cyan': '[1;36;1m',
          'gray': '[1;30;1m',
          'black': '[0m'
          }

colors = {
        'process': ansii_colors['green'],
        'time': ansii_colors['magenta'],
        'normal': ansii_colors['gray'],
        'warning': ansii_colors['red'],
        'success': ansii_colors['cyan']
        }


def show_output(text, color='normal', multi=False, time=False):
    '''
    get colored output to the terminal
    '''
    time = f"\033{colors['time']}{dt.now().strftime('%H:%M:%S')}\033[0m : " if time else ''
    proc = f"\033{colors['process']}Process {os.getpid()}\033[0m : " if multi else ''
    text = f"\033{colors[color]}{text}\033[0m"
    print(time + proc + text)


def show_command(command, config, multi=True):
    '''
    prints the command line if debugging is active
    '''

    if config['debug_mode']:
        proc = f"\033[92mProcess {os.getpid()}\033[0m : " if multi else ""
        if len(command) > 1:
            command = f"\033[1m$ {' '.join(command)}\033[0m"

        print(proc + command)
    return


def get_chrom_list(config):
    '''
    returns a list of all valid chromosomes determined by build version
    '''

    def get_chrom(c, use_chr=True):
        if c > 21:
            if c == 22:
                chrom = "X"
            if c == 23:
                chrom = "Y"
        else:
            chrom = c + 1
        return f"chr{chrom}" if use_chr else chrom

    # switch for use of "chr"-prefix
    is_hg38 = (config['ref']['build'] == 'hg38')

    chrom_list = [get_chrom(chrom, is_hg38) for chrom in range(24)]
    return chrom_list


def validate(file, message):
    '''
    file existence checks
    '''
    if not os.path.exists(file):
        sys.stderr.write(f"{message}: {file}")
        sys.exit(1)
    else:
        return file


def sort_chr(chrom):
    '''
    sorts all types of chrom lists
    '''

    chrom = chrom.replace('Chr', '').replace('chr', '')
    assigner = {'X': 50, 'Y': 60, 'M': 70, '*': 80}
    try:
        chrom = int(chrom)
    except ValueError:
        if chrom in ['X', 'Y', 'M', '*']:
            chrom = assigner[chrom]
        else:
            chrom = 100
    return chrom


def bam2chr_list(bam_file):
    '''
    creates a list of chromosome names for the input bam
    '''

    # set the minimum size of included bam-files to 100
    BAM_MIN = 100
    bam_stats_cmd = ['samtools', 'idxstats', bam_file]
    bam_stats = Popen(bam_stats_cmd, stdout=PIPE, stderr=DEVNULL)
    bam_stats_string = StringIO(bam_stats.communicate()[0].decode('utf-8'))
    stats_df = pd.read_csv(bam_stats_string, sep='\t', header=None)
    # set the minimum size of included bam-files to 100
    non_empty = stats_df[stats_df[2] > BAM_MIN]
    return list(non_empty[0].T)


def pon2chr_list(pon_list):
    '''
    generate a chromosome list from all the bams in the pon_list
    '''

    pon_df = pd.read_csv(pon_list)
    chr_set = set()
    pon_df.iloc[0].apply(lambda bam_file: chr_set.update(bam2chr_list(bam_file)))
    return list(chr_set)


def bed2chr_list(bed_file):
    '''
    generates a chromosome list from a bed file
    '''

    bed_df = pd.read_csv(bed_file, sep='\t', dtype={0: str}, header=None, skiprows=10)
    # return the list of unique values from the first row (Chr row)
    return bed_df.iloc[:, 0].unique()


# ############ FILTER_BAM UTILS ########################################################
def reduce_regions(df, padding):
    '''
    takes a mutation list and returns a region list using padding
    overlapping regions are reduced to one using the gap strategy
    '''

    df = df.sort_values('Start')
    df['Start'] = df['Start'] - padding
    df['End'] = df['End'] + padding
    # find the break points
    # if Start is greater than previous End (using shift), this is a gap --> df['gap'] = 1
    df['gap'] = df['Start'].gt(df['End'].shift()).astype('int')
    # id different reads according to gap
    # cumulative sum does not increase at df['gap'] == 0 and so these consecutive stretches are grouped together
    df['gap'] = df['gap'].cumsum()
    # groupby the coverage break group and condense individual coverage islands
    # agg has to contain the neccessary shared columns TransLength because it is needed for coverage computation
    new_df = df.groupby('gap').agg({'Start': 'min', 'End':'max'})
    new_df = new_df
    return new_df.reset_index('gap').drop(columns='gap')


def mut2bed(mut_file, padding, bed_file):
    # check for filter_bam folder (using general declaration for easy folder name changing)
    folder = os.path.split(bed_file)[0]
    if not os.path.isdir(folder):
        os.makedirs(folder)

    # read the anno_file
    anno_df = pd.read_csv(mut_file, sep='\t').sort_values(['Chr', 'Start']).iloc[:,:5]
    if not len(anno_df.index):
        anno_df.to_csv(bed_file, index=False, sep='\t', header=False)
        return bed_file

    # get the bedfie with padded and collapsed regions
    bed_df = anno_df.groupby('Chr').apply(reduce_regions, padding)
    # remove Chr index
    bed_df = bed_df.reset_index().drop(columns='level_1')
    # write bed_df to file
    bed_df.to_csv(bed_file, index=False, sep='\t', header=False)
    return bed_file


def get_mut_bed(w, input):
    '''
    serves as a params function creating and returning the bed file for the samtools view
    '''
    conf = config['filter_bam']
    padding = conf['padding']
    bed_file = mut2bed(input.csv, padding, f"{conf['folder']}/{w.sample}_{w.tumor}-{w.normal}.bed")
    return bed_file
